// Generated by CoffeeScript 1.4.0
var ArrayResult, Cursor, IterableResult, ar, aropt, err, nextCbCheck, util, varar,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

err = require('./errors');

util = require('./util');

ar = util.ar;

varar = util.varar;

aropt = util.aropt;

IterableResult = (function() {

  function IterableResult() {}

  IterableResult.prototype.hasNext = function() {
    throw "Abstract Method";
  };

  IterableResult.prototype.next = function() {
    throw "Abstract Method";
  };

  IterableResult.prototype.each = varar(1, 2, function(cb, onFinished) {
    var brk, n,
      _this = this;
    if (typeof cb !== 'function') {
      throw new err.RqlDriverError("First argument to each must be a function.");
    }
    if ((onFinished != null) && typeof onFinished !== 'function') {
      throw new err.RqlDriverError("Optional second argument to each must be a function.");
    }
    brk = false;
    n = function() {
      if (!brk && _this.hasNext()) {
        return _this.next(function(err, row) {
          brk = cb(err, row) === false;
          return n();
        });
      } else if (onFinished != null) {
        return onFinished();
      }
    };
    return n();
  });

  IterableResult.prototype.toArray = ar(function(cb) {
    var arr,
      _this = this;
    if (typeof cb !== 'function') {
      throw new err.RqlDriverError("Argument to toArray must be a function.");
    }
    arr = [];
    if (!this.hasNext()) {
      cb(null, arr);
    }
    return this.each(function(err, row) {
      if (err != null) {
        cb(err);
      } else {
        arr.push(row);
      }
      if (!_this.hasNext()) {
        return cb(null, arr);
      }
    });
  });

  return IterableResult;

})();

Cursor = (function(_super) {

  __extends(Cursor, _super);

  function Cursor(conn, token) {
    this._conn = conn;
    this._token = token;
    this._chunks = [];
    this._endFlag = false;
    this._contFlag = false;
    this._cont = null;
    this._cbQueue = [];
  }

  Cursor.prototype._addChunk = function(chunk) {
    if (chunk.length > 0) {
      return this._chunks.push(chunk);
    }
  };

  Cursor.prototype._addData = function(chunk) {
    this._addChunk(chunk);
    this._contFlag = false;
    this._promptNext();
    return this;
  };

  Cursor.prototype._endData = function(chunk) {
    this._addChunk(chunk);
    this._endFlag = true;
    this._contFlag = true;
    this._promptNext();
    return this;
  };

  Cursor.prototype._promptNext = function() {
    var cb, chunk, row;
    while (this._cbQueue[0] != null) {
      if (!this.hasNext()) {
        cb = this._cbQueue.shift();
        cb(new err.RqlDriverError("No more rows in the cursor."));
      } else {
        chunk = this._chunks[0];
        if (!(chunk != null)) {
          this._promptCont();
          return;
        } else {
          row = chunk.shift();
          cb = this._cbQueue.shift();
          if (chunk[0] === void 0) {
            this._chunks.shift();
          }
          cb(null, row);
        }
      }
    }
  };

  Cursor.prototype._promptCont = function() {
    if (!this._contFlag) {
      this._conn._continueQuery(this._token);
      return this._contFlag = true;
    }
  };

  Cursor.prototype.hasNext = ar(function() {
    return !this._endFlag || (this._chunks[0] != null);
  });

  Cursor.prototype.next = ar(function(cb) {
    nextCbCheck(cb);
    this._cbQueue.push(cb);
    return this._promptNext();
  });

  Cursor.prototype.close = ar(function() {
    if (!this._endFlag) {
      return this._conn._endQuery(this._token);
    }
  });

  Cursor.prototype.toString = ar(function() {
    return "[object Cursor]";
  });

  return Cursor;

})(IterableResult);

ArrayResult = (function(_super) {

  __extends(ArrayResult, _super);

  function ArrayResult() {
    return ArrayResult.__super__.constructor.apply(this, arguments);
  }

  ArrayResult.prototype.hasNext = ar(function() {
    return this.__index < this.length;
  });

  ArrayResult.prototype.next = ar(function(cb) {
    nextCbCheck(cb);
    return cb(null, this[this.__proto__.__index++]);
  });

  ArrayResult.prototype.makeIterable = function(response) {
    var method, name, _ref;
    _ref = ArrayResult.prototype;
    for (name in _ref) {
      method = _ref[name];
      if (name !== 'constructor') {
        response.__proto__[name] = method;
      }
    }
    response.__proto__.__index = 0;
    return response;
  };

  return ArrayResult;

})(IterableResult);

nextCbCheck = function(cb) {
  if (typeof cb !== 'function') {
    throw new err.RqlDriverError("Argument to next must be a function.");
  }
};

module.exports.Cursor = Cursor;

module.exports.makeIterable = ArrayResult.prototype.makeIterable;
